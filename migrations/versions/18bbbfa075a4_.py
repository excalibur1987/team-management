"""empty message

Revision ID: 18bbbfa075a4
Revises: d2067441f202
Create Date: 2021-05-31 15:53:35.903961

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "18bbbfa075a4"
down_revision = "d2067441f202"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_affiliation",
        sa.Column("id", sa.INTEGER(), nullable=False, comment="Unique row identifier"),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("org_id", sa.Integer(), nullable=True),
        sa.Column("department_id", sa.Integer(), nullable=True),
        sa.Column("position_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["organization_departments.id"],
            name=op.f("fk_user_affiliation_department_id_organization_departments"),
        ),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["organizations.id"],
            name=op.f("fk_user_affiliation_org_id_organizations"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_user_affiliation_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_affiliation")),
    )
    op.alter_column(
        "organization_departments",
        "org_id",
        existing_type=sa.INTEGER(),
        comment="",
        existing_nullable=True,
    )
    op.alter_column(
        "organizations",
        "contact_email",
        existing_type=sa.VARCHAR(),
        comment="",
        existing_nullable=False,
    )
    op.alter_column(
        "organizations",
        "contact_phone",
        existing_type=sa.VARCHAR(),
        comment="",
        existing_nullable=False,
    )
    op.add_column(
        "project_users",
        sa.Column(
            "cancelled_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="timestamp for cancellation of record",
        ),
    )
    op.add_column(
        "project_users",
        sa.Column(
            "date_added",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="row timestamp",
        ),
    )
    op.add_column(
        "project_users",
        sa.Column(
            "date_updated",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="timestamp for last updated",
        ),
    )
    op.add_column(
        "project_users", sa.Column("added_by_id", sa.INTEGER(), nullable=True)
    )
    op.add_column(
        "project_users",
        sa.Column(
            "updated_by_id", sa.INTEGER(), nullable=True, comment="fk for user's table"
        ),
    )
    op.add_column(
        "project_users",
        sa.Column(
            "cancelled_by_id",
            sa.INTEGER(),
            nullable=True,
            comment="fk for user's table",
        ),
    )
    op.create_foreign_key(
        op.f("fk_project_users_added_by_id_users"),
        "project_users",
        "users",
        ["added_by_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("fk_project_users_cancelled_by_id_users"),
        "project_users",
        "users",
        ["cancelled_by_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("fk_project_users_updated_by_id_users"),
        "project_users",
        "users",
        ["updated_by_id"],
        ["id"],
    )
    op.add_column(
        "projects",
        sa.Column("slug", sa.String(), nullable=False, comment="unique project's slug"),
    )
    op.add_column("projects", sa.Column("org_id", sa.Integer(), nullable=True))
    op.create_unique_constraint(op.f("uq_projects_slug"), "projects", ["slug"])
    op.create_foreign_key(
        op.f("fk_projects_org_id_organizations"),
        "projects",
        "organizations",
        ["org_id"],
        ["id"],
    )
    op.add_column("users", sa.Column("manager_id", sa.Integer(), nullable=True))
    op.create_foreign_key(
        op.f("fk_users_manager_id_users"), "users", "users", ["manager_id"], ["id"]
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("fk_users_manager_id_users"), "users", type_="foreignkey")
    op.drop_column("users", "manager_id")
    op.drop_constraint(
        op.f("fk_projects_org_id_organizations"), "projects", type_="foreignkey"
    )
    op.drop_constraint(op.f("uq_projects_slug"), "projects", type_="unique")
    op.drop_column("projects", "org_id")
    op.drop_column("projects", "slug")
    op.drop_constraint(
        op.f("fk_project_users_updated_by_id_users"),
        "project_users",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_project_users_cancelled_by_id_users"),
        "project_users",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_project_users_added_by_id_users"), "project_users", type_="foreignkey"
    )
    op.drop_column("project_users", "cancelled_by_id")
    op.drop_column("project_users", "updated_by_id")
    op.drop_column("project_users", "added_by_id")
    op.drop_column("project_users", "date_updated")
    op.drop_column("project_users", "date_added")
    op.drop_column("project_users", "cancelled_at")
    op.alter_column(
        "organizations",
        "contact_phone",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="",
        existing_nullable=False,
    )
    op.alter_column(
        "organizations",
        "contact_email",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="",
        existing_nullable=False,
    )
    op.alter_column(
        "organization_departments",
        "org_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="",
        existing_nullable=True,
    )
    op.drop_table("user_affiliation")
    # ### end Alembic commands ###
