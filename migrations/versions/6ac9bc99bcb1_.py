"""empty message

Revision ID: 6ac9bc99bcb1
Revises: 4e82c6ed8997
Create Date: 2021-05-25 13:16:14.471255

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "6ac9bc99bcb1"
down_revision = "4e82c6ed8997"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "asset_storage",
        sa.Column("id", sa.INTEGER(), nullable=False, comment="Unique row identifier"),
        sa.Column("ref_id", sa.String(), nullable=False, comment="unique id for file"),
        sa.Column(
            "title", sa.String(), nullable=False, comment="file title with extension"
        ),
        sa.Column("url", sa.String(), nullable=False, comment="file url"),
        sa.Column(
            "date_added",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="row timestamp",
        ),
        sa.Column(
            "date_updated",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="timestamp for last updated",
        ),
        sa.Column("added_by_id", sa.INTEGER(), nullable=True),
        sa.Column(
            "updated_by_id", sa.INTEGER(), nullable=True, comment="fk for user's table"
        ),
        sa.ForeignKeyConstraint(
            ["added_by_id"],
            ["users.id"],
            name=op.f("fk_asset_storage_added_by_id_users"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["users.id"],
            name=op.f("fk_asset_storage_updated_by_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_asset_storage")),
        sa.UniqueConstraint("ref_id", name=op.f("uq_asset_storage_ref_id")),
    )
    op.create_table(
        "projects",
        sa.Column("id", sa.INTEGER(), nullable=False, comment="Unique row identifier"),
        sa.Column(
            "cancelled_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="timestamp for cancellation of record",
        ),
        sa.Column("title", sa.String(), nullable=False, comment="Project's Title"),
        sa.Column(
            "description",
            sa.String(),
            nullable=True,
            comment="Description for created project",
        ),
        sa.Column(
            "is_completed",
            sa.BOOLEAN(),
            server_default=sa.text("CAST(true AS BOOLEAN)"),
            nullable=False,
            comment="flags the project as complete",
        ),
        sa.Column(
            "start_date",
            sa.DATE(),
            nullable=False,
            comment="timestamp for project's start date",
        ),
        sa.Column(
            "time_frame",
            sa.INTEGER(),
            nullable=False,
            comment="estimated time-frame for project in days",
        ),
        sa.Column(
            "date_added",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="row timestamp",
        ),
        sa.Column(
            "date_updated",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="timestamp for last updated",
        ),
        sa.Column("added_by_id", sa.INTEGER(), nullable=True),
        sa.Column(
            "updated_by_id", sa.INTEGER(), nullable=True, comment="fk for user's table"
        ),
        sa.Column(
            "cancelled_by_id",
            sa.INTEGER(),
            nullable=True,
            comment="fk for user's table",
        ),
        sa.ForeignKeyConstraint(
            ["added_by_id"], ["users.id"], name=op.f("fk_projects_added_by_id_users")
        ),
        sa.ForeignKeyConstraint(
            ["cancelled_by_id"],
            ["users.id"],
            name=op.f("fk_projects_cancelled_by_id_users"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["users.id"],
            name=op.f("fk_projects_updated_by_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_projects")),
    )
    op.create_table(
        "asset_permissions",
        sa.Column("id", sa.INTEGER(), nullable=False, comment="Unique row identifier"),
        sa.Column(
            "asset_id", sa.INTEGER(), nullable=True, comment="asset reference id"
        ),
        sa.Column("user_id", sa.INTEGER(), nullable=True, comment="user's id"),
        sa.Column(
            "can_update",
            sa.BOOLEAN(),
            server_default=sa.text("CAST(false AS BOOLEAN)"),
            nullable=False,
            comment="if the user can update the asset",
        ),
        sa.Column(
            "can_delete",
            sa.BOOLEAN(),
            server_default=sa.text("CAST(false AS BOOLEAN)"),
            nullable=False,
            comment="if the user can delete the asset",
        ),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset_storage.id"],
            name=op.f("fk_asset_permissions_asset_id_asset_storage"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_asset_permissions_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_asset_permissions")),
    )
    op.create_table(
        "project_asset",
        sa.Column("id", sa.INTEGER(), nullable=False, comment="Unique row identifier"),
        sa.Column("project_id", sa.INTEGER(), nullable=True),
        sa.Column("asset_id", sa.INTEGER(), nullable=True),
        sa.Column(
            "date_added",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="row timestamp",
        ),
        sa.Column(
            "date_updated",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="timestamp for last updated",
        ),
        sa.Column("added_by_id", sa.INTEGER(), nullable=True),
        sa.Column(
            "updated_by_id", sa.INTEGER(), nullable=True, comment="fk for user's table"
        ),
        sa.ForeignKeyConstraint(
            ["added_by_id"],
            ["users.id"],
            name=op.f("fk_project_asset_added_by_id_users"),
        ),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset_storage.id"],
            name=op.f("fk_project_asset_asset_id_asset_storage"),
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
            name=op.f("fk_project_asset_project_id_projects"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["users.id"],
            name=op.f("fk_project_asset_updated_by_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project_asset")),
    )
    op.create_table(
        "project_users",
        sa.Column("id", sa.INTEGER(), nullable=False, comment="Unique row identifier"),
        sa.Column("project_id", sa.INTEGER(), nullable=True),
        sa.Column("user_id", sa.INTEGER(), nullable=True),
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("CAST(true AS BOOLEAN)"),
            nullable=False,
            comment="flags the validity of user in the project",
        ),
        sa.Column(
            "role_id",
            sa.SMALLINT(),
            nullable=False,
            comment="user's role in this project",
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
            name=op.f("fk_project_users_project_id_projects"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_project_users_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project_users")),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("project_users")
    op.drop_table("project_asset")
    op.drop_table("asset_permissions")
    op.drop_table("projects")
    op.drop_table("asset_storage")
    # ### end Alembic commands ###
